class Game {
    field Array x,y;
    field Array pixels;
    field Array state;
    field int n;
    constructor Game begin(Array a, Array b, int count) {

        let n = count;
        let x = Array.new(2048);
        let y = Array.new(2048);
        let state = Array.new(2048); //holds count of neighbour
        let pixels = Array.new(2048);
        do genstart(a, b);

        return this;
    }
    method void genstart(Array a, Array b) {
        var boolean exit;
        var int i, j;
        let exit = false;
        let x = a;
        let y = b;
        let i = 0;
        while(~exit) {
            do initpix(x, y); // initialises live cells
            do getNeighbour(); //gets neighbours of each live cell and dead cell
            do update(); //updates screen and prepares for next generation
            do Sys.wait(1000);
        }
        return;
    }
    method void update() {
        var int i, j;
        let i = 0;
        let j = 0;
        do x.dispose();  // deletes previous gen
        do y.dispose(); 
        while(i<2048) {
            // if its a live cell
            if(pixels[i] = 1) {
                if(state[i] < 2) {
                    // deletes previous live cell
                    let pixels[i] = 0;
                    do Screen.setColor(false);
                    do Screen.drawRectangle(((i - (64*(i/64))) * 8), (i/64)*8, ((i - (64*(i/64))) * 8) + 7, ((i/64)*8) + 7);
                    let n = n - 1;
                }
                if(state[i]>1) {
                    if(state[i] < 4) {
                        //saves live cell for next gen
                        let pixels[i] = 1;
                        let x[j] = (i - (64*(i/64))) * 8;
                        let y[j] = (i/64)*8;
                        let j = j+1;
                    }
                }
                
                if(state[i] > 3) {
                    // deletes previous live cell
                    let pixels[i] = 0;
                    do Screen.setColor(false);
                    do Screen.drawRectangle(((i - (64*(i/64))) * 8), (i/64)*8, ((i - (64*(i/64))) * 8) + 7, ((i/64)*8) + 7);
                    let n = n - 1;
                }
            }

            //if its a dead cell
            if(pixels[i] = 0) {
                if(state[i] = 3) {
                    //saves live cell for next gen
                    let pixels[i] = 1;
                    let x[j] = (i - (64*(i/64))) * 8;
                    let y[j] = (i/64)*8;
                    do Screen.setColor(true);
                    do Screen.drawRectangle(((i - (64*(i/64))) * 8), (i/64)*8, ((i - (64*(i/64))) * 8) + 7, ((i/64)*8) + 7);
                    let j = j + 1;
                    let n = n + 1;
                }

            }
            let i = i+1;
        }
        let j = 0;
        //deltes state of previous gen
        while(j<2048) {
            let state[j] = 0;
            let j = j + 1;
        }
        return;
    }
    method void initpix(Array a, Array b) {
        var int i, j;
        let j = 0;
        let i = 0;
        
        while(i<n) {
            let j = (b[i] * 8) + (a[i]/8); 
            let pixels[j] = 1; 
            let i = i + 1;
        }
        return ;
    }
    method void getNeighbour() {
        var int i, neighbour, xc, yc, pix, j, temp, ln, rn;
        var boolean exit, flag;
        let exit = false;
        let neighbour = 0;
        let i = 0;
        while(i < n) {
            let xc = x[i];
            let yc = y[i];
            let pix = (yc*8) + (xc/8);
            let temp = pix;
            let flag = false;
            //checks if box is at the left or right edge
            while(~flag) {
                let temp = temp - 64;
                if(temp = 0) {
                    let flag = true;
                    let ln = 1;
                }
                if(temp = - 1) {
                    let flag = true;
                    let rn = 1;
                }
                if(temp < -1) {
                    let flag = true;
                }
            }

            if((pix-64) > -1) {//checks if box is at the top of screen
                //middle top neighbour
                if(pixels[pix-64] = 1) { 
                    let neighbour = neighbour+1;
                } else {
                    let state[pix-64] = state[pix - 64] + 1; //changes state of neighbour dead cell 

                }
                //top left neighbour
                if((ln = 0)) { 
                    if(pixels[pix - 64 - 1] = 1) {
                        let neighbour = neighbour + 1;
                    } else {
                        let state[pix-64 - 1] = state[pix - 64 - 1] + 1; //changes state of neighbour dead cell
                    }
                }
                //top right neigbour
                if(rn = 0){
                    if(pixels[pix - 64 + 1] = 1) {
                        let neighbour = neighbour + 1;
                    } else {
                        let state[pix-64+1] = state[pix - 64+1] + 1; //changes state of neighbour dead cell
                    }
                }
            }

            //left neighbour
            if(ln = 0) {
                if(pixels[pix - 1] = 1) {
                    let neighbour = neighbour + 1;
                } else {
                    let state[pix-1] = state[pix - 1] + 1; //changes state of neighbour dead cell
                }
            }
            //right neighbour
            if(rn = 0) {
                if(pixels[pix + 1] = 1) {
                    let neighbour = neighbour + 1;
                } else {
                    let state[pix +1] = state[pix + 1] + 1; //changes state of neighbour dead cell
                }
            }

            //check if box is at the bottom
            if((pix + 64) < 2048) {
                //middle bottom neighbour
                if(pixels[pix+64] = 1) {
                    let neighbour = neighbour+1;
                } else {
                    let state[pix+64] = state[pix + 64] + 1; //changes state of neighbour dead cell
                }
                //botom left neighbour
                if((ln = 0)) {
                    if(pixels[pix + 64 - 1] = 1) {
                        let neighbour = neighbour + 1;
                    } else {
                        let state[pix+64-1] = state[pix + 64 - 1] + 1; //changes state of neighbour dead cell
                    }
                }
                //bottom right neighbour
                if(rn = 0){
                    if(pixels[pix + 64 + 1] = 1) {
                        let neighbour = neighbour + 1;
                    } else {
                        let state[pix+64+1] = state[pix + 64+1] + 1; //changes state of neighbour dead cell
                    }
                }  
            }

            let state[pix] = neighbour; //changes state of live cell
            let ln = 0;
            let rn = 0;
            let neighbour = 0;
            let i=i+1;
        }
        return;
    }
}