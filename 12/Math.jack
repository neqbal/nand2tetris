// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/** A library of commonly used mathematical functions.
 *  All functions runs in O(n), where n is the number of bits used
 *  for representing a two's complement integer value (16 in the Hack computer). 
 *  Note: Jack compilers implement multiplication and division
 *  using calls to OS functions in this class.
 */
class Math {
    static int n;             // Number of bits used for representing a two's complement integer
    static Array powersOfTwo; // Stores 2^0, 2^1, 2^2,..., 2^(n-1)

    // Initializes the Math library.
    function void init() {
        var int i;
        let n = Array.new(16);
        let powersOfTwo = Array.new(16);
        let powersOfTwo[0] = 1;
        while(i<15) {
            let i = i+1;
            let powersOfTwo[i] = powersOfTwo[i-1] + powersOfTwo[i-1];
        }
        return;
    }

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*'
     *  in an expression, it handles it by invoking this method. 
     *  Thus, in Jack, x * y and Math.multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
        var int sign;
        var int temp;
        var int i;
        var int j;
        if((x=0) | (y=0)) {
            return 0;
        }
        let sign = ((x<0) | (y<0))  & (~((x<0) & (y<0)));

        let x = Math.abs(x);
        let y = Math.abs(y);

        if(y>x) {
            let temp = x;
            let x = y;
            let y = temp;
        }
        let temp = 0;
        let j = 1;
        while(((j-y) < 0) | ((j-y) = 0)) {
            if((y&j) = j) {
                let temp = temp + x;
            }
            let x = x + x;
            let i = i + 1;
            let j = powersOfTwo[i];
        }

        if(sign) {
            return -temp;
        } else {
            return temp;
        }
    }

    /** Returns the integer part of x / y.
     *  When a Jack compiler detects the division operator '/'
     *  an an expression, it handles it by invoking this method.
     *  Thus, x/y and Math.divide(x,y) return the same value.
     */
    function int divide(int x, int y) {
        var int sign;
        var int i;
        var int q;
        var int temp;

        let sign = ((x<0) | (y<0))  & (~((x<0) & (y<0)));
        let x = Math.abs(x);
        let y = Math.abs(y);
        if(y=0) {

        } else {
            if( (x=0) | (x<y)) {
                return 0;
            } else {
                if(y>x) {
                    let temp = x;
                    let x = y;
                    let y = temp;
                }
                let temp = 0;
                let i = 1;
                let n[0] = y;
                while((y>0) & (y < x) & (i < 15)) {
                    let n[i] = y+y;
                    let i = i + 1;
                    let y = y + y;
                }
                if(n[i-1] > 0) {
                    let q = 0;
                }
                let temp = n[i-1];
                let i = i - 2;
                while(i>(-1)) {
                    if((x - (n[i+1]*q)) < n[i]) {
                        let q = q + q;
                    } else {
                        let q = (q + q) + 1;
                    }
                    let i = i - 1;
                }


            }
        }

        if(sign) {
            return -q;
        } else {
             return q;
        }
    }

    /** Returns the integer part of the square root of x.
    */
    function int sqrt(int x) {
        var int i,j,k,l;

        if(x<0) {

        } else {
            let i = 7;
            while(i > (-1)) {
                let j = l + powersOfTwo[i];
                let k = j*j;

                if( (~(k>x)) & (~(k<0)) ) {
                    let l = j;
                }
                let i = i-1;
            }
        }
        return l;
    }

    /** Returns the greater value.
    */
    function int max(int a, int b) {
        if(a>b) {
            return a;
        } else {
            return b;
        }
    }

    /** Returns the smaller value.
    */
    function int min(int a, int b) {
        if(a<b) {
            return a;
        } else {
            return b;
        }
    }

    /** Returns the absolute value of x
    */
    function int abs(int x) {
        if(x<0) {
            return (-x);
        } else {
            return x;
        }
    }
}
