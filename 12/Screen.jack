// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 512 rows (indexed 0..511, top to bottom)
 * of 256 pixels each (indexed 0..255, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {
    static int start;
    static int powersOfTwo;
    static int colour;
    /** Initializes the Screen. */
    function void init() {
        var int i;
        let start = 16384;
        let powersOfTwo = Array.new(16);
        let powersOfTwo[0] = 1;
        while(i<15) {
            let i = i+1;
            let powersOfTwo[i] = powersOfTwo[i-1] + powersOfTwo[i-1];
        }
        return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
        return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
        if(b) {
            let colour = -1;
        } else {
            let colour = 0;
        }
        return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
        var int temp;
        var int bit;
        var int word;
        if( (x<0) | (x>511) | (y<0) | (y>255) ) {

        }

        let temp = x/16;
        let bit = x - (temp*16);
        let word = (y*32) + temp;

        if(colour) {
            let start[word] = start[word] | powersOfTwo[bit];
        } else {
            let start[word] = start[word] & ~(powersOfTwo[bit]);
        }
        return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
        if( (x1-x2) < 0 ) {
            if( (y1-y2) < 0 ) {
                while((x1 < (x2+1)) ) {
                    do Screen.drawPixel(x1, y1);
                    let x1 = x1 + 1;
                    let y1 = y1 + 1;
                }
                return;
            } 
            if( (y1-y2) > 0 ) {
                while( (x1 < (x2+1)) & (y1 > (y2+1) ) ) {
                    do Screen.drawPixel(x1, y1);
                    let x1 = x1 + 1;
                    let y1 = y1 - 1;
                }
                return;
            }
        } 
        if((x1-x2) > 0) {
            if( (y1-y2) < 0 ) {
                while(x1 > (x2-1) ) {
                    do Screen.drawPixel(x1, y1);
                    let x1 = x1 - 1;
                    let y1 = y1 + 1;
                }
                return;
            } 
            if( (y1-y2) > 0 ) {
                while(x1 > (x2-1)) {
                    do Screen.drawPixel(x1, y1);
                    let x1 = x1 - 1;
                    let y1 = y1 - 1;
                }
                return;
            }
        }

        if( (x1-x2) = 0 ) {
            if( (y1-y2) < 0) {
                while(y1 < (y2 + 1)) {
                    do Screen.drawPixel(x1,y1);
                    let y1 = y1 + 1;
                }
                return;
            } 
            if( (y1-y2) > 0){
                while(y1 > (y2-1)) {
                    do Screen.drawPixel(x1,y1);
                    let y1 = y1-1;
                }
                return;
            }
        } 

        if( (y1-y2) = 0 ) {
            if( (x1-x2) < 0 ) {
                while(x1 < (x2 + 1)) {
                    do Screen.drawPixel(x1,y1);
                    let x1 = x1+1;
                }
                return;
            }
            if( (x1-x2) > 0 ){
                while(x1 > (x2 - 1)) {
                    do Screen.drawPixel(x1,y1);
                    let x1 = x1 - 1;
                }
                return;
            }
        }
        return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        var int x, y;
        let x = x1;
        let y = y1;
        while(y < y2) {
            while(x<x2) {
                do Screen.drawPixel(x, y);
                let x = x + 1;
            }
            let x = x1;
            let y = y + 1;
        }

        return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
        var int m, n, o ,p, i, a;
        let m = x-r;
        let n = x + r;
        let i = 0;
        let a = y;
        while(m< (x+1) ) {
            while( Math.sqrt( ((x-m)*(x-m)) + ((y-a)*(y-a))) = r ) {
                let a = a - 1;
            }
            do Screen.drawLine(m, a, m, y + (y-a) );
            do Screen.drawLine(n, a, n, y + (y-a) ); 
            let m = m+1;
            let n=n-1;

        }
        return;
    }
}
