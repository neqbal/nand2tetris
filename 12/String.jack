// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    field int size;
    field Array loc;
    field int length;
    constructor String new(int maxLength) {
        if(maxLength < 0) {

        }
        if(maxLength > 0) {
            let loc = Array.new(maxLength);
        }
        let size = maxLength;
        let length = 0;
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        if(size>0) {
            do loc.dispose();
        }
        do Memory.deAlloc(this);
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return length;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        if( (length<0) | (j > length) | (j=length)) {

        }
        return loc[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        if( (j<0) | (j>length) | (j=length) ) {

        }
        let loc[j] = c;
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        if(size = length) {

        }
        let loc[length] = c;
        let length = length + 1;
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        if(length = 0) {

        }
        let length = length - 1;
        return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
        var int sign;
        var int i;
        var int num;
        if(length = 0) {
            return 0;
        }
        let i = 0;
        if (loc[0] = 45) {
            let sign = -1;
            let i = 1;
        }
        let num = 0;
        while( ((loc[i] > 47) & (loc[i] < 59)) | (i<length)) {
            let num = (num*10) + (loc[i] - 48);
            let i = i+1;
        }

        if(sign) {
            return -num;            
        }
        return num;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        var int i;
        var Array n;
        var int r;
        var int d;

        let n = Array.new(size);
        let r = Math.abs(val);
        
        while(r>0) {
            let d = r/10;
            let n[i] = (r - (d*10)) + 48;
            let r = d;
            let i = i + 1;
        }

        if(val<0) {
            let loc[0] = 45;
            let length = 1;
        }
        let d=i;
        let i=0;
        while(i< (d)) {
            let loc[length + i] = n[d-1-i];
            let i = i + 1;
        }
        let length = length + d;
        return;
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}
